// booleaniisf,byteiisf,chariisf,doubleiisf,floatiisf,intiisf,longiisf,objectiisf,shortiisf
package %%PACKAGE%%;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.io.IOException;
import org.junit.jupiter.api.Test;
import tfw.immutable.iis.%%LOWERCASE%%iis.%%NAME%%Iis;
import tfw.immutable.ila.%%LOWERCASE%%ila.%%NAME%%Ila;
import tfw.immutable.ila.%%LOWERCASE%%ila.%%NAME%%IlaFromArray;

final class %%NAME%%IisFactoryFrom%%NAME%%IlaTest {
    @Test
    void argumentsTest() {
        assertThatThrownBy(() -> %%NAME%%IisFactoryFrom%%NAME%%Ila.create(null))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("ila == null not allowed!");
    }

    @Test
    void factoryTest() throws IOException {
        final %%TYPE%%[] expectedArray = new %%TYPE%%[11];
        final %%NAME%%Ila%%TEMPLATE%% ila = %%NAME%%IlaFromArray.create(expectedArray);
        final %%NAME%%IisFactory%%TEMPLATE%% iisf = %%NAME%%IisFactoryFrom%%NAME%%Ila.create(ila);
        final %%NAME%%Iis%%TEMPLATE%% iis = iisf.create();
        final %%TYPE%%[] actualArray = new %%TYPE%%[expectedArray.length];

        assertThat(iis.read(actualArray, 0, actualArray.length)).isEqualTo(actualArray.length);
        assertThat(actualArray).isEqualTo(expectedArray);
    }
}
