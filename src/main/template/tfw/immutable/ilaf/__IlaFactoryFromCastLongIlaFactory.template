// byteilaf,charilaf,doubleilaf,floatilaf,intilaf,shortilaf
package %%PACKAGE%%;

import tfw.check.Argument;
import tfw.immutable.ila.%%LOWER_NAME%%ila.%%NAME%%Ila;
import tfw.immutable.ila.%%LOWER_NAME%%ila.%%NAME%%IlaFromCastLongIla;
import tfw.immutable.ilaf.longilaf.LongIlaFactory;

public class %%NAME%%IlaFactoryFromCastLongIlaFactory {
    private %%NAME%%IlaFactoryFromCastLongIlaFactory() {}

    public static %%NAME%%IlaFactory create(LongIlaFactory longIlaFactory, final int bufferSize) {
        return new %%NAME%%IlaFactoryImpl(longIlaFactory, bufferSize);
    }

    private static class %%NAME%%IlaFactoryImpl implements %%NAME%%IlaFactory {
        private final LongIlaFactory longIlaFactory;
        private final int bufferSize;

        public %%NAME%%IlaFactoryImpl(final LongIlaFactory longIlaFactory, final int bufferSize) {
            Argument.assertNotNull(longIlaFactory, "longIlaFactory");

            this.longIlaFactory = longIlaFactory;
            this.bufferSize = bufferSize;
        }

        @Override
        public %%NAME%%Ila create() {
            return %%NAME%%IlaFromCastLongIla.create(longIlaFactory.create(), bufferSize);
        }
    }
}
