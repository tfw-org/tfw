// byteilaf,charilaf,doubleilaf,floatilaf,intilaf,longilaf,shortilaf
package %%PACKAGE%%;

import tfw.check.Argument;
import tfw.immutable.ila.%%LOWER_NAME%%ila.%%NAME%%Ila;
import tfw.immutable.ila.%%LOWER_NAME%%ila.%%NAME%%IlaAdd;

public class %%NAME%%IlaFactoryAdd {
    private %%NAME%%IlaFactoryAdd() {}

    public static %%TEMPLATE_SPACE%%%%NAME%%IlaFactory%%TEMPLATE%% create(%%NAME%%IlaFactory%%TEMPLATE%% leftFactory, %%NAME%%IlaFactory%%TEMPLATE%% rightFactory, int bufferSize) {
        return new %%NAME%%IlaFactoryImpl%%DIAMOND%%(leftFactory, rightFactory, bufferSize);
    }

    private static class %%NAME%%IlaFactoryImpl%%TEMPLATE%% implements %%NAME%%IlaFactory%%TEMPLATE%% {
        private final %%NAME%%IlaFactory%%TEMPLATE%% leftFactory;
        private final %%NAME%%IlaFactory%%TEMPLATE%% rightFactory;
        private final int bufferSize;

        public %%NAME%%IlaFactoryImpl(%%NAME%%IlaFactory%%TEMPLATE%% leftFactory, %%NAME%%IlaFactory%%TEMPLATE%% rightFactory, int bufferSize) {
            Argument.assertNotNull(leftFactory, "leftFactory");
            Argument.assertNotNull(rightFactory, "rightFactory");

            this.leftFactory = leftFactory;
            this.rightFactory = rightFactory;
            this.bufferSize = bufferSize;
        }

        @Override
        public %%NAME%%Ila%%TEMPLATE%% create() {
            return %%NAME%%IlaAdd.create(leftFactory.create(), rightFactory.create(), bufferSize);
        }
    }
}
