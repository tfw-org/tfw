// byteilaf,charilaf,doubleilaf,intilaf,longilaf,shortilaf
package %%PACKAGE%%;

import tfw.check.Argument;
import tfw.immutable.ila.%%LOWER_NAME%%ila.%%NAME%%Ila;
import tfw.immutable.ila.%%LOWER_NAME%%ila.%%NAME%%IlaFromCastFloatIla;
import tfw.immutable.ilaf.floatilaf.FloatIlaFactory;

public class %%NAME%%IlaFactoryFromCastFloatIlaFactory {
    private %%NAME%%IlaFactoryFromCastFloatIlaFactory() {}

    public static %%NAME%%IlaFactory create(FloatIlaFactory floatIlaFactory, final int bufferSize) {
        return new %%NAME%%IlaFactoryImpl(floatIlaFactory, bufferSize);
    }

    private static class %%NAME%%IlaFactoryImpl implements %%NAME%%IlaFactory {
        private final FloatIlaFactory floatIlaFactory;
        private final int bufferSize;

        public %%NAME%%IlaFactoryImpl(final FloatIlaFactory floatIlaFactory, final int bufferSize) {
            Argument.assertNotNull(floatIlaFactory, "floatIlaFactory");

            this.floatIlaFactory = floatIlaFactory;
            this.bufferSize = bufferSize;
        }

        @Override
        public %%NAME%%Ila create() {
            return %%NAME%%IlaFromCastFloatIla.create(floatIlaFactory.create(), bufferSize);
        }
    }
}
