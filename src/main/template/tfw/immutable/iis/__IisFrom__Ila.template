// booleaniis,byteiis,chariis,doubleiis,floatiis,intiis,longiis,objectiis,shortiis
package %%PACKAGE%%;

import java.io.IOException;
import tfw.check.Argument;
import tfw.immutable.iis.IisFromIlaUtil;
import tfw.immutable.ila.%%LOWERCASE%%ila.%%NAME%%Ila;

public final class %%NAME%%IisFrom%%NAME%%Ila {
    private %%NAME%%IisFrom%%NAME%%Ila() {}

    public static %%TEMPLATE_SPACE%%%%NAME%%Iis%%TEMPLATE%% create(final %%NAME%%Ila%%TEMPLATE%% ila) {
        return new %%NAME%%IisImpl%%DIAMOND%%(ila);
    }

    private static class %%NAME%%IisImpl%%TEMPLATE%% extends Abstract%%NAME%%Iis%%TEMPLATE%% {
        private final %%NAME%%Ila%%TEMPLATE%% ila;

        private long index = 0;

        public %%NAME%%IisImpl(final %%NAME%%Ila%%TEMPLATE%% ila) {
            Argument.assertNotNull(ila, "ila");

            this.ila = ila;
        }

        @Override
        public void closeImpl() throws IOException {
            index = ila.length();
        }

        @Override
        protected int readImpl(%%TYPE_OR_TEMPLATE%%[] array, int offset, int length) throws IOException {
            final int elementsToGet = IisFromIlaUtil.read(ila.length(), index, length);

            if (elementsToGet > -1) {
                ila.get(array, offset, index, elementsToGet);

                index += elementsToGet;
            }

            return elementsToGet;
        }

        @Override
        protected long skipImpl(long n) throws IOException {
            final long elementsSkipped = IisFromIlaUtil.skip(ila.length(), index, n);

            if (elementsSkipped > -1) {
                index += elementsSkipped;
            }

            return elementsSkipped;
        }
    }
}
