// byteila,charila,doubleila,floatila,intila,longila,shortila
package %%PACKAGE%%;

import static org.assertj.core.api.Assertions.assertThatThrownBy;

%%RANDOM_INCLUDE%%import org.junit.jupiter.api.Test;
import tfw.immutable.ila.IlaTestDimensions;

final class %%NAME%%IlaSubtractTest {
    @Test
    void argumentsTest() {
        final %%NAME%%Ila ila1 = %%NAME%%IlaFromArray.create(new %%TYPE%%[10]);
        final %%NAME%%Ila ila2 = %%NAME%%IlaFromArray.create(new %%TYPE%%[20]);

        assertThatThrownBy(() -> %%NAME%%IlaSubtract.create(null, ila1, 1))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("leftIla == null not allowed!");
        assertThatThrownBy(() -> %%NAME%%IlaSubtract.create(ila1, null, 1))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("rightIla == null not allowed!");
        assertThatThrownBy(() -> %%NAME%%IlaSubtract.create(ila1, ila2, 1))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("leftIla.length() (=10) != rightIla.length() (=20) not allowed!");
        assertThatThrownBy(() -> %%NAME%%IlaSubtract.create(ila1, ila1, 0))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("bufferSize (=0) < 1 not allowed!");
    }

    @Test
    void allTest() throws Exception {
        %%RANDOM_INIT%%final int length = IlaTestDimensions.defaultIlaLength();
        final %%TYPE%%[] leftArray = new %%TYPE%%[length];
        final %%TYPE%%[] rightArray = new %%TYPE%%[length];
        final %%TYPE%%[] array = new %%TYPE%%[length];
        for (int ii = 0; ii < leftArray.length; ++ii) {
            leftArray[ii] = %%RANDOM_VALUE%%;
            rightArray[ii] = %%RANDOM_VALUE%%;
            array[ii] = %%CAST_FROM_INT_PAREN%%leftArray[ii] - rightArray[ii]%%CAST_FROM_INT_PAREN_END%%;
        }
        %%NAME%%Ila leftIla = %%NAME%%IlaFromArray.create(leftArray);
        %%NAME%%Ila rightIla = %%NAME%%IlaFromArray.create(rightArray);
        %%NAME%%Ila targetIla = %%NAME%%IlaFromArray.create(array);
        %%NAME%%Ila actualIla = %%NAME%%IlaSubtract.create(leftIla, rightIla, 100);

        %%NAME%%IlaCheck.check(targetIla, actualIla);
    }
}
